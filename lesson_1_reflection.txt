How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    You can easily find out simple mistakes due to typo or careless
    reasons from the comparison of the two versions without doing so
    manually.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Because I can easily check out the changes I made to the program,
    which may help me find bugs.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    It is a much more flexible way to manually choose when to create a
    commit. Every time the changes having a logic purpose should trigger
    a commit. This avoids the saving of too small changes because it is
    not meaningful to save too many versions with tiny changes.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    When multiple files have close relationship or the changes made to
    a file triggerred other changes to the other files simultaneously,
    saving multiple files in one commit is necessary. 

How can you use the commands git log and git diff to view the history of files?

    With git log, I can see the commit history of the repository; and 
    based on the commit ids listed by git log results, using git diff
    with the commit ids specified, I can see the difference between 
    two different files.

How might using version control make you more confident to make changes that
could break something?

    Because I can use git checkout with commit id gotten from git log 
    to recover the pervious versions and then I can also use git che-
    ckout to get back to the latest version.

Now that you have your workspace set up, what do you want to try using Git for?

    To build a new project and modify the version-control for the sou-
    rce code with git.
